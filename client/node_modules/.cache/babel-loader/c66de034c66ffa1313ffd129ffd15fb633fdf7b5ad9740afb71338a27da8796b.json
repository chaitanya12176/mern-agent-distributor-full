{"ast":null,"code":"const express = require('express');\nconst asyncHandler = require('express-async-handler');\nconst {\n  protect,\n  adminOnly\n} = require('../middleware/auth');\nconst Lead = require('../models/Lead');\nconst router = express.Router();\n\n/**\r\n * @route   GET /api/leads\r\n * @desc    List all leads (admin only, optional filters by agentId & batchId)\r\n */\nrouter.get('/', protect, adminOnly, asyncHandler(async (req, res) => {\n  const {\n    agentId,\n    batchId\n  } = req.query;\n  const filter = {};\n  if (agentId) filter.agentId = agentId;\n  if (batchId) filter.batchId = batchId;\n  const leads = await Lead.find(filter).populate('agentId', 'name email');\n  res.json(leads);\n}));\n\n/**\r\n * @route   GET /api/leads/agent/:agentId\r\n * @desc    Get all leads assigned to a specific agent\r\n */\nrouter.get('/agent/:agentId', protect, asyncHandler(async (req, res) => {\n  const leads = await Lead.find({\n    agentId: req.params.agentId\n  });\n  res.json(leads);\n}));\n\n/**\r\n * @route   GET /api/leads/:id\r\n * @desc    Get a single lead by ID (admin only)\r\n */\nrouter.get('/:id', protect, adminOnly, asyncHandler(async (req, res) => {\n  const lead = await Lead.findById(req.params.id);\n  if (!lead) {\n    return res.status(404).json({\n      message: 'Lead not found'\n    });\n  }\n  res.json(lead);\n}));\n\n/**\r\n * @route   DELETE /api/leads/:id\r\n * @desc    Delete a lead by ID (admin only)\r\n */\nrouter.delete('/:id', protect, adminOnly, asyncHandler(async (req, res) => {\n  const lead = await Lead.findById(req.params.id);\n  if (!lead) {\n    return res.status(404).json({\n      message: 'Lead not found'\n    });\n  }\n  await lead.deleteOne();\n  res.json({\n    message: 'Lead deleted successfully'\n  });\n}));\nmodule.exports = router;","map":{"version":3,"names":["express","require","asyncHandler","protect","adminOnly","Lead","router","Router","get","req","res","agentId","batchId","query","filter","leads","find","populate","json","params","lead","findById","id","status","message","delete","deleteOne","module","exports"],"sources":["E:/mern-agent-distributor-full/mern-agent-distributor-full/client/src/pages/Leads.js"],"sourcesContent":["const express = require('express');\r\nconst asyncHandler = require('express-async-handler');\r\nconst { protect, adminOnly } = require('../middleware/auth');\r\nconst Lead = require('../models/Lead');\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @route   GET /api/leads\r\n * @desc    List all leads (admin only, optional filters by agentId & batchId)\r\n */\r\nrouter.get('/', protect, adminOnly, asyncHandler(async (req, res) => {\r\n  const { agentId, batchId } = req.query;\r\n  const filter = {};\r\n  if (agentId) filter.agentId = agentId;\r\n  if (batchId) filter.batchId = batchId;\r\n\r\n  const leads = await Lead.find(filter).populate('agentId', 'name email');\r\n  res.json(leads);\r\n}));\r\n\r\n/**\r\n * @route   GET /api/leads/agent/:agentId\r\n * @desc    Get all leads assigned to a specific agent\r\n */\r\nrouter.get('/agent/:agentId', protect, asyncHandler(async (req, res) => {\r\n  const leads = await Lead.find({ agentId: req.params.agentId });\r\n  res.json(leads);\r\n}));\r\n\r\n/**\r\n * @route   GET /api/leads/:id\r\n * @desc    Get a single lead by ID (admin only)\r\n */\r\nrouter.get('/:id', protect, adminOnly, asyncHandler(async (req, res) => {\r\n  const lead = await Lead.findById(req.params.id);\r\n  if (!lead) {\r\n    return res.status(404).json({ message: 'Lead not found' });\r\n  }\r\n  res.json(lead);\r\n}));\r\n\r\n/**\r\n * @route   DELETE /api/leads/:id\r\n * @desc    Delete a lead by ID (admin only)\r\n */\r\nrouter.delete('/:id', protect, adminOnly, asyncHandler(async (req, res) => {\r\n  const lead = await Lead.findById(req.params.id);\r\n  if (!lead) {\r\n    return res.status(404).json({ message: 'Lead not found' });\r\n  }\r\n  await lead.deleteOne();\r\n  res.json({ message: 'Lead deleted successfully' });\r\n}));\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAM;EAAEE,OAAO;EAAEC;AAAU,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAC5D,MAAMI,IAAI,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AAEtC,MAAMK,MAAM,GAAGN,OAAO,CAACO,MAAM,CAAC,CAAC;;AAE/B;AACA;AACA;AACA;AACAD,MAAM,CAACE,GAAG,CAAC,GAAG,EAAEL,OAAO,EAAEC,SAAS,EAAEF,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;EACnE,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGH,GAAG,CAACI,KAAK;EACtC,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIH,OAAO,EAAEG,MAAM,CAACH,OAAO,GAAGA,OAAO;EACrC,IAAIC,OAAO,EAAEE,MAAM,CAACF,OAAO,GAAGA,OAAO;EAErC,MAAMG,KAAK,GAAG,MAAMV,IAAI,CAACW,IAAI,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,SAAS,EAAE,YAAY,CAAC;EACvEP,GAAG,CAACQ,IAAI,CAACH,KAAK,CAAC;AACjB,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA;AACAT,MAAM,CAACE,GAAG,CAAC,iBAAiB,EAAEL,OAAO,EAAED,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;EACtE,MAAMK,KAAK,GAAG,MAAMV,IAAI,CAACW,IAAI,CAAC;IAAEL,OAAO,EAAEF,GAAG,CAACU,MAAM,CAACR;EAAQ,CAAC,CAAC;EAC9DD,GAAG,CAACQ,IAAI,CAACH,KAAK,CAAC;AACjB,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA;AACAT,MAAM,CAACE,GAAG,CAAC,MAAM,EAAEL,OAAO,EAAEC,SAAS,EAAEF,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;EACtE,MAAMU,IAAI,GAAG,MAAMf,IAAI,CAACgB,QAAQ,CAACZ,GAAG,CAACU,MAAM,CAACG,EAAE,CAAC;EAC/C,IAAI,CAACF,IAAI,EAAE;IACT,OAAOV,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEM,OAAO,EAAE;IAAiB,CAAC,CAAC;EAC5D;EACAd,GAAG,CAACQ,IAAI,CAACE,IAAI,CAAC;AAChB,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA;AACAd,MAAM,CAACmB,MAAM,CAAC,MAAM,EAAEtB,OAAO,EAAEC,SAAS,EAAEF,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;EACzE,MAAMU,IAAI,GAAG,MAAMf,IAAI,CAACgB,QAAQ,CAACZ,GAAG,CAACU,MAAM,CAACG,EAAE,CAAC;EAC/C,IAAI,CAACF,IAAI,EAAE;IACT,OAAOV,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEM,OAAO,EAAE;IAAiB,CAAC,CAAC;EAC5D;EACA,MAAMJ,IAAI,CAACM,SAAS,CAAC,CAAC;EACtBhB,GAAG,CAACQ,IAAI,CAAC;IAAEM,OAAO,EAAE;EAA4B,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC;AAEHG,MAAM,CAACC,OAAO,GAAGtB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}